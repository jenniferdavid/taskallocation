<?xml version="1.0"?>
<!--
BSD 3-Clause License
\file      spawn_multihusky.launch
\authors   Shehan Caldera <shehancaldera@gmail.com
Copyright (c) 2019, Shehan Caldera
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<launch>
    <arg name="robot_namespace" default="h0"/>
    <!-- Generate the tf_prefix from the namespace -->
    <arg name="tfpre" default="$(arg robot_namespace)_tf" />
    <!-- Put value on the parameter server in the group's namespace -->
    <param name="tf_prefix" value="$(arg robot_namespace)_tf" />
    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="yaw" default="0.0"/>

    <arg name="laser_enabled" default="$(optenv HUSKY_LMS1XX_ENABLED false)"/>
    <arg name="kinect_enabled" default="$(optenv HUSKY_UR5_ENABLED false)"/>
    <arg name="urdf_extras" default="$(optenv HUSKY_URDF_EXTRAS)"/>

    <param name="robot_description" command="$(find xacro)/xacro '$(find multihusky_gazebo)/urdf/husky.urdf.xacro'
        --inorder
        robot_namespace:=$(arg robot_namespace)
        tfpre:=$(arg tfpre)
        laser_enabled:=$(arg laser_enabled)
        kinect_enabled:=$(arg kinect_enabled)
        urdf_extras:=$(arg urdf_extras)
        " />

    <!-- Spawn robot in gazebo -->
    <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model" 
        args="-x $(arg x) -y $(arg y) -Y $(arg yaw) -unpause -urdf -param robot_description -model Husky_$(arg robot_namespace)" respawn="false" output="screen" />

    <!-- Start the state publisher node in the namespace - uses the 
       joint states from gazebo
       along with the URDF model (robot_description) to publish 
       the joint positions to /tf --> 
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    <!-- Here we spawn (load and launch) two controllers which become 
       part of Gazebo. The key thing we need to do is to set the 
       "base_frame_id" of the diff_drive_controller
       to include the tf_pre so that our tf trees work out.   
       So, we load the default control configuration and then overwrite 
       the base_frame_id -->
    <!-- Load controller configuration -->
    <rosparam command="load" file="$(find husky_control)/config/control.yaml" />
    <rosparam param="husky_velocity_controller/base_frame_id" subst_value="True">$(arg tfpre)/base_link</rosparam>
    <!-- Spawn controllers -->
    <node name="base_controller_spawner" pkg="controller_manager" type="spawner"
         args="husky_joint_publisher husky_velocity_controller"/>

    <!-- Start EKF for localization -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
        <rosparam command="load" file="$(find multihusky_gazebo)/config/localization.yaml" />
        <!--rosparam param="base_link_frame" subst_value="True">$(arg tfpre)/base_link</rosparam-->
    </node>
    <!--
    <node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="$(arg x) $(arg y) 0 $(arg yaw) 0 0 /map /$(arg tfpre)/odom 100" />
     -->
    <node pkg="amcl" type="amcl" name="amcl">
      <param name="use_map_topic" value="true"/>
      <!-- Publish scans from best pose at a max of 10 Hz -->
      <param name="odom_model_type" value="diff"/>
      <param name="odom_alpha5" value="0.1"/>
      <param name="gui_publish_rate" value="10.0"/>
      <param name="laser_max_beams" value="60"/>
      <param name="laser_max_range" value="12.0"/>
      <param name="min_particles" value="500"/>
      <param name="max_particles" value="2000"/>
      <param name="kld_err" value="0.05"/>
      <param name="kld_z" value="0.99"/>
      <param name="odom_alpha1" value="0.2"/>
      <param name="odom_alpha2" value="0.2"/>
      <!-- can add initial pose x y yaw here-->
      <param name="initial_pose_x" value="$(arg x)"/>
      <param name="initial_pose_y" value="$(arg y)"/>
      <param name="initial_pose_a" value="$(arg yaw)"/>
      <!-- translation std dev, m -->
      <param name="odom_alpha3" value="0.2"/>
      <param name="odom_alpha4" value="0.2"/>
      <param name="laser_z_hit" value="0.5"/>
      <param name="laser_z_short" value="0.05"/>
      <param name="laser_z_max" value="0.05"/>
      <param name="laser_z_rand" value="0.5"/>
      <param name="laser_sigma_hit" value="0.2"/>
      <param name="laser_lambda_short" value="0.1"/>
      <param name="laser_model_type" value="likelihood_field"/>
      <!-- <param name="laser_model_type" value="beam"/> -->
      <param name="laser_likelihood_max_dist" value="2.0"/>
      <param name="update_min_d" value="0.25"/>
      <param name="update_min_a" value="0.2"/>
      <param name="base_frame_id" value="/$(arg tfpre)/base_link"/>
      <param name="odom_frame_id" value="/$(arg tfpre)/odom"/>
      <param name="resample_interval" value="1"/>
      <!-- Increase tolerance because the computer can get quite busy -->
      <param name="transform_tolerance" value="1.0"/>
      <param name="recovery_alpha_slow" value="0.0"/>
      <param name="recovery_alpha_fast" value="0.0"/>
      <remap from="map" to="/map"/>
      <remap from="scan" to="/$(arg robot_namespace)/scan"/>
    </node>

    <!-- Twister server for rviz control-->
    <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen">
        <param name="link_name" value="$(arg tfpre)/base_link" />
    </node>

    <!-- Twist mux is a node from Clearpath that mixes control commands from multiple sources -->
    <node pkg="twist_mux" type="twist_mux" name="twist_mux">
        <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
        <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
    </node>

    <group if="$(arg kinect_enabled)">

      <!-- Include poincloud_to_laserscan if simulated Kinect is attached -->
      <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">

          <remap from="cloud_in" to="camera/depth/points"/>
          <remap from="scan" to="scan"/>
          <rosparam>
              target_frame: base_link # Leave empty to output scan in the pointcloud frame
              tolerance: 1.0
              min_height: 0.05
              max_height: 1.0

              angle_min: -0.52 # -30.0*M_PI/180.0
              angle_max: 0.52 # 30.0*M_PI/180.0
              angle_increment: 0.005 # M_PI/360.0
              scan_time: 0.3333
              range_min: 0.45
              range_max: 4.0
              use_inf: true

              # Concurrency level, affects number of pointclouds queued for processing and number of threads used
              # 0 : Detect number of cores
              # 1 : Single threaded
              # 2->inf : Parallelism level
              concurrency_level: 1
          </rosparam>
      </node>

    </group>

</launch>
